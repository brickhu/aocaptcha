

local utils = require(".utils")
local crypto = require(".crypto");
local vector = require("modules.path")


Variant = "0.0.1"

Operator = Operator or ""

Paths = {
  ["0"] = {"0 0 29 38","M12.3213 37.8158C10.2093 37.8158 8.2413 37.2878 6.4173 36.2318C4.5933 35.1438 3.12128 33.5438 2.00128 31.4318C0.881282 29.3198 0.321289 26.6958 0.321289 23.5598C0.321289 21.4478 0.689293 19.4318 1.42529 17.5118C2.16129 15.5598 2.99333 13.8318 3.92133 12.3278C3.76133 11.9118 3.68134 11.4318 3.68134 10.8878C3.68134 9.63983 4.0333 8.40783 4.7373 7.19183C5.4733 5.94383 6.43331 4.80783 7.61731 3.78383C8.83331 2.75983 10.1933 1.94383 11.6973 1.33583C13.2013 0.727828 14.7373 0.423828 16.3053 0.423828C18.7373 0.423828 20.8813 1.03183 22.7373 2.24783C24.5933 3.46383 26.0493 5.15983 27.1053 7.33583C28.1613 9.47983 28.6893 11.9598 28.6893 14.7758C28.6893 18.1678 28.2413 21.2718 27.3453 24.0878C26.4813 26.9038 25.2813 29.3358 23.7453 31.3838C22.2413 33.4318 20.4973 35.0158 18.5133 36.1358C16.5613 37.2558 14.4973 37.8158 12.3213 37.8158ZM12.6093 7.95983C12.6733 8.15183 12.7053 8.37583 12.7053 8.63183C12.7053 9.11183 12.6093 9.51183 12.4173 9.83183C12.2253 10.1518 11.9693 10.5038 11.6493 10.8878C11.2333 11.3678 10.7533 12.1038 10.2093 13.0958C9.69729 14.0558 9.20131 15.1758 8.72131 16.4558C8.24131 17.7358 7.8413 19.0638 7.5213 20.4398C7.2333 21.7838 7.08929 23.0638 7.08929 24.2798C7.08929 26.4238 7.48931 28.1038 8.28931 29.3198C9.08931 30.5358 10.2733 31.1438 11.8413 31.1438C13.1533 31.1438 14.4173 30.7118 15.6333 29.8478C16.8813 28.9838 17.9853 27.8158 18.9453 26.3438C19.9053 24.8398 20.6573 23.1278 21.2013 21.2078C21.7773 19.2878 22.0653 17.2558 22.0653 15.1118C22.0653 13.5758 21.8573 12.1838 21.4413 10.9358C21.0253 9.68783 20.4333 8.69583 19.6653 7.95983C18.8973 7.22383 17.9853 6.85583 16.9293 6.85583C16.0653 6.85583 15.2653 6.96783 14.5293 7.19183C13.8253 7.38383 13.1853 7.63983 12.6093 7.95983Z"},
  ["1"] = {"0 0 26 42","M13.6318 41.696C13.0878 41.696 12.5918 41.616 12.1438 41.456C11.7278 41.328 11.3758 41.056 11.0878 40.64C9.77583 40.864 8.47983 41.04 7.19983 41.168C5.91983 41.296 4.71983 41.36 3.59983 41.36C2.63983 41.36 1.88783 41.12 1.34383 40.64C0.799832 40.192 0.527832 39.552 0.527832 38.72C0.527832 38.24 0.799832 37.696 1.34383 37.088C1.88783 36.48 2.89583 35.904 4.36783 35.36C5.83983 34.784 7.98383 34.336 10.7998 34.016C11.0238 32.512 11.3598 30.736 11.8078 28.688C12.2558 26.608 12.7998 24.4 13.4398 22.064C14.0798 19.696 14.8318 17.36 15.6958 15.056C14.5118 16.304 13.2638 17.36 11.9518 18.224C10.6718 19.088 9.43983 19.744 8.25583 20.192C7.10383 20.64 6.11183 20.864 5.27983 20.864C4.60783 20.864 4.04783 20.752 3.59983 20.528C3.18383 20.304 2.97583 19.888 2.97583 19.28C2.97583 18.512 3.34383 17.808 4.07983 17.168C4.81583 16.496 5.61583 15.84 6.47983 15.2C7.79183 14.208 9.19983 13.024 10.7038 11.648C12.2398 10.272 13.6638 8.80002 14.9758 7.23202C16.3198 5.66402 17.3598 4.12802 18.0958 2.62402C18.4478 1.95202 18.8318 1.42402 19.2478 1.04002C19.6638 0.624016 20.3358 0.416016 21.2638 0.416016C22.1918 0.416016 22.8638 0.832016 23.2798 1.66402C23.6958 2.46402 23.9038 3.42402 23.9038 4.54402C23.9038 4.99202 23.7758 5.92002 23.5198 7.32802C23.2638 8.70402 22.9118 10.4 22.4638 12.416C22.0158 14.4 21.5198 16.592 20.9758 18.992C20.4318 21.36 19.8718 23.792 19.2958 26.288C18.7198 28.784 18.1758 31.2 17.6638 33.536C18.7198 33.504 19.8078 33.488 20.9278 33.488C22.2718 33.488 23.4398 33.6 24.4318 33.824C25.4238 34.048 25.9198 34.528 25.9198 35.264C25.9198 36.032 25.5838 36.608 24.9118 36.992C24.2718 37.344 23.4878 37.664 22.5598 37.952C21.6958 38.208 20.7198 38.48 19.6318 38.768C18.5438 39.088 17.3918 39.376 16.1758 39.632C15.8558 40.368 15.4718 40.896 15.0238 41.216C14.5758 41.536 14.1118 41.696 13.6318 41.696Z"},
  ["2"] = {"0 0 31 41","M5.3099 40.0638C3.7099 40.0638 2.57389 39.6798 1.90189 38.9118C1.26189 38.1758 0.941895 37.4078 0.941895 36.6078C0.941895 35.9038 1.1019 35.2478 1.4219 34.6398C1.7739 33.9998 2.3819 33.4878 3.2459 33.1038C4.1099 32.7198 5.34189 32.5598 6.94189 32.6238C8.54189 31.7918 10.1579 30.7678 11.7899 29.5518C13.4539 28.3358 15.0379 26.9918 16.5419 25.5198C18.0779 24.0478 19.4379 22.5438 20.6219 21.0078C21.8379 19.4398 22.7819 17.9038 23.4539 16.3998C24.1579 14.8638 24.5099 13.4238 24.5099 12.0798C24.5099 10.6398 24.0619 9.55176 23.1659 8.81576C22.3019 8.07976 21.0859 7.71176 19.5179 7.71176C18.1739 7.71176 16.9419 7.87176 15.8219 8.19176C14.7019 8.47976 13.7099 8.83176 12.8459 9.24776C11.9819 9.66376 11.2459 10.0318 10.6379 10.3518C10.0619 10.6398 9.5979 10.7838 9.2459 10.7838C8.6379 10.7838 8.0939 10.5278 7.6139 10.0158C7.1339 9.47176 6.9899 8.76776 7.1819 7.90376C7.3099 7.32776 7.69389 6.63976 8.33389 5.83976C8.97389 5.03976 9.8539 4.23976 10.9739 3.43976C12.0939 2.63976 13.4219 1.98376 14.9579 1.47176C16.5259 0.927762 18.2859 0.655762 20.2379 0.655762C23.3739 0.655762 25.9179 1.61576 27.8699 3.53576C29.8539 5.45576 30.8459 8.38376 30.8459 12.3198C30.8459 14.9118 30.1579 17.4558 28.7819 19.9518C27.4379 22.4478 25.6459 24.8158 23.4059 27.0558C21.1659 29.2958 18.7179 31.3438 16.0619 33.1998C18.4619 33.1038 20.3339 32.9598 21.6779 32.7678C23.0219 32.5438 24.0939 32.3518 24.8939 32.1918C25.7259 32.0318 26.5259 31.9518 27.2939 31.9518C28.3819 31.9518 29.2299 32.1758 29.8379 32.6238C30.4459 33.0718 30.7499 33.7118 30.7499 34.5438C30.7499 35.1518 30.5899 35.7438 30.2699 36.3198C29.9819 36.8958 29.4059 37.4238 28.5419 37.9038C27.6779 38.3518 26.4299 38.7038 24.7979 38.9598C23.1659 39.2478 21.0219 39.3918 18.3659 39.3918C16.7979 39.3918 15.1819 39.3758 13.5179 39.3438C11.8859 39.3118 10.3019 39.2638 8.7659 39.1998C7.8699 39.5198 7.1659 39.7438 6.6539 39.8718C6.1739 39.9998 5.7259 40.0638 5.3099 40.0638Z"},
  ["3"] = {"0 0 28 41","M27.7467 23.752C27.7467 24.968 27.2667 26.248 26.3067 27.592C25.3467 28.904 24.0987 30.2 22.5627 31.48C21.0267 32.76 19.3467 33.976 17.5227 35.128C15.7307 36.248 13.9547 37.24 12.1947 38.104C10.4667 39 8.93066 39.688 7.58665 40.168C6.24265 40.68 5.26666 40.936 4.65866 40.936C3.50666 40.936 2.56266 40.728 1.82666 40.312C1.09066 39.896 0.722656 39.16 0.722656 38.104C0.722656 37.304 0.91466 36.68 1.29866 36.232C1.68266 35.784 2.22665 35.4 2.93065 35.08C4.62665 34.312 6.37066 33.496 8.16266 32.632C9.95466 31.768 11.6667 30.888 13.2987 29.992C14.9627 29.096 16.4347 28.216 17.7147 27.352C19.0267 26.488 20.0667 25.672 20.8347 24.904C21.6027 24.104 21.9867 23.4 21.9867 22.792C21.9867 22.088 21.7147 21.576 21.1707 21.256C20.6587 20.936 19.9707 20.728 19.1067 20.632C18.2427 20.504 17.2827 20.44 16.2267 20.44C14.7867 20.44 13.5867 20.504 12.6267 20.632C11.6667 20.76 10.8347 20.888 10.1307 21.016C9.45866 21.112 8.83465 21.16 8.25865 21.16C7.29865 21.16 6.61066 20.952 6.19466 20.536C5.77866 20.088 5.57066 19.496 5.57066 18.76C5.57066 18.152 5.79466 17.528 6.24266 16.888C6.69066 16.248 7.41065 15.768 8.40265 15.448C10.4826 14.776 12.3227 14.04 13.9227 13.24C15.5547 12.408 16.8187 11.496 17.7147 10.504C18.6427 9.51204 19.1067 8.44004 19.1067 7.28804C19.1067 6.93604 18.9307 6.69604 18.5787 6.56804C18.2587 6.44004 17.5867 6.37604 16.5627 6.37604C15.6347 6.37604 14.5947 6.48804 13.4427 6.71204C12.3227 6.93604 11.2187 7.20804 10.1307 7.52804C9.07466 7.81604 8.16265 8.07204 7.39465 8.29604C6.65865 8.52004 6.19465 8.63204 6.00266 8.63204C4.59465 8.63204 3.89066 7.92804 3.89066 6.52004C3.89066 6.20004 4.13066 5.68804 4.61066 4.98404C5.09066 4.28004 5.81066 3.56004 6.77066 2.82404C7.73066 2.05604 8.91466 1.40004 10.3227 0.85604C11.7627 0.312039 13.4267 0.0400391 15.3147 0.0400391C17.1707 0.0400391 18.7867 0.408039 20.1627 1.14404C21.5707 1.88004 22.6587 2.88804 23.4267 4.16804C24.2267 5.41604 24.6267 6.84004 24.6267 8.44004C24.6267 9.65604 24.2427 10.872 23.4747 12.088C22.7387 13.272 21.8107 14.328 20.6907 15.256C22.8347 15.896 24.5467 17 25.8267 18.568C27.1067 20.104 27.7467 21.832 27.7467 23.752Z"},
  ["4"] = {"0 0 39 42","M20.3463 41.7438C19.2263 41.7438 18.4103 41.3598 17.8983 40.5918C17.4183 39.8558 17.1783 38.8958 17.1783 37.7118C17.1783 36.4318 17.2743 35.2958 17.4663 34.3038C17.6903 33.3118 17.9463 32.3038 18.2343 31.2798C16.6663 31.4078 15.0824 31.5358 13.4824 31.6638C11.8824 31.7598 10.2823 31.8398 8.68234 31.9038C8.10634 32.3518 7.49834 32.7038 6.85834 32.9598C6.21834 33.2158 5.48236 33.3438 4.65036 33.3438C3.43436 33.3438 2.47436 33.0878 1.77036 32.5758C1.06636 32.0638 0.714355 31.2478 0.714355 30.1278C0.714355 28.8478 1.09833 27.9038 1.86633 27.2958C2.66633 26.6558 3.67435 26.2078 4.89035 25.9518C6.49035 23.9998 8.23434 22.0478 10.1223 20.0958C12.0103 18.1438 13.8823 16.2078 15.7383 14.2878C17.5943 12.3678 19.2583 10.4798 20.7303 8.62376C22.2343 6.73576 23.3703 4.89576 24.1383 3.10376C24.5223 2.20776 25.0504 1.58376 25.7224 1.23176C26.4264 0.847762 27.1784 0.655762 27.9784 0.655762C29.0984 0.655762 29.8503 1.08776 30.2343 1.95176C30.6503 2.81576 30.8583 3.85576 30.8583 5.07176C30.8583 5.35976 30.7463 6.09576 30.5223 7.27976C30.2983 8.43176 29.9783 9.91976 29.5623 11.7438C29.1783 13.5358 28.7304 15.5358 28.2184 17.7438C27.7384 19.9198 27.2423 22.1758 26.7303 24.5118C28.8423 24.2878 30.6664 24.1118 32.2024 23.9838C33.7384 23.8238 34.7143 23.7438 35.1303 23.7438C36.0583 23.7438 36.8104 23.8398 37.3864 24.0318C37.9624 24.2238 38.2503 24.7038 38.2503 25.4718C38.2503 26.1758 37.8023 26.7678 36.9063 27.2478C36.0423 27.6958 35.0983 28.0958 34.0743 28.4478C33.0503 28.7998 31.8184 29.1518 30.3784 29.5038C28.9384 29.8558 27.2583 30.1758 25.3383 30.4638C25.0183 31.7758 24.6984 33.0238 24.3784 34.2078C24.0584 35.3918 23.7543 36.7518 23.4663 38.2878C23.2423 39.3118 22.9063 40.1438 22.4583 40.7838C22.0423 41.4238 21.3383 41.7438 20.3463 41.7438ZM22.0743 15.2958C20.5063 17.2158 18.8743 19.1358 17.1783 21.0558C15.5143 22.9438 13.9144 24.6558 12.3784 26.1918C13.5624 26.0318 14.7624 25.8878 15.9784 25.7598C17.2264 25.6318 18.4744 25.5038 19.7224 25.3758L22.0743 15.2958Z"},
  ["5"] = {"0 0 36 44","M4.90649 43.744C3.69049 43.744 2.60249 43.408 1.64249 42.736C0.714487 42.096 0.250488 41.136 0.250488 39.856C0.250488 38.672 0.602488 37.824 1.30649 37.312C2.01049 36.768 2.95449 36.496 4.13849 36.496C4.61849 36.496 5.09849 36.56 5.57849 36.688C6.05849 36.784 6.95451 36.912 8.26651 37.072C10.4745 35.952 12.4265 34.864 14.1225 33.808C15.8185 32.72 17.1465 31.648 18.1065 30.592C19.0665 29.504 19.5465 28.4 19.5465 27.28C19.5465 26.224 19.1305 25.6 18.2985 25.408C17.4985 25.184 16.5225 25.056 15.3705 25.024C15.2425 25.024 15.0985 25.024 14.9385 25.024C14.8105 24.992 14.6665 24.976 14.5065 24.976C12.8745 24.88 11.3385 24.688 9.8985 24.4C8.4905 24.08 7.33851 23.52 6.4425 22.72C5.5465 21.888 5.09851 20.656 5.09851 19.024C5.09851 17.2 5.33851 15.408 5.81851 13.648C6.29851 11.856 6.90649 10.208 7.64249 8.70399C7.35449 8.44799 7.1785 8.14399 7.1145 7.79199C7.0825 7.40799 7.0665 7.02399 7.0665 6.63999C7.0665 6.25599 7.35451 5.87199 7.93051 5.48799C8.50651 5.10399 9.2905 4.71999 10.2825 4.33599C11.1145 3.21599 11.9145 2.33599 12.6825 1.69599C13.4505 1.02399 14.0585 0.687988 14.5065 0.687988C15.0505 0.687988 15.5305 0.863989 15.9465 1.21599C16.3945 1.56799 16.7305 2.01599 16.9545 2.55999C18.8745 2.17599 20.8745 1.87199 22.9545 1.64799C25.0665 1.42399 27.1145 1.31199 29.0985 1.31199C30.2505 1.31199 31.2905 1.40799 32.2185 1.59999C33.1785 1.75999 33.9305 2.09599 34.4745 2.60799C35.0505 3.08799 35.3385 3.83999 35.3385 4.86399C35.3385 5.72799 35.0505 6.36799 34.4745 6.78399C33.9305 7.16799 33.1945 7.37599 32.2665 7.40799C30.4105 7.43999 28.4265 7.58399 26.3145 7.83999C24.2025 8.09599 22.1225 8.38399 20.0745 8.70399C18.0585 8.99199 16.2505 9.21599 14.6505 9.37599C14.1385 10.304 13.6425 11.264 13.1625 12.256C12.7145 13.216 12.3305 14.112 12.0105 14.944C11.7225 15.776 11.5785 16.448 11.5785 16.96C11.5785 17.856 11.9625 18.4 12.7305 18.592C13.4985 18.784 14.4105 18.912 15.4665 18.976C16.7145 19.072 17.9625 19.232 19.2105 19.456C20.4585 19.648 21.5945 20 22.6185 20.512C23.6745 21.024 24.5225 21.792 25.1625 22.816C25.8025 23.808 26.1225 25.136 26.1225 26.8C26.1225 28.368 25.6745 29.952 24.7785 31.552C23.9145 33.152 22.7305 34.688 21.2265 36.16C19.7545 37.6 18.0905 38.88 16.2345 40C14.4105 41.152 12.5065 42.064 10.5225 42.736C8.57049 43.408 6.69849 43.744 4.90649 43.744Z"},
  ["6"] = {"0 0 35 44","M13.1008 43.2162C11.6288 43.2162 10.2368 42.8162 8.92484 42.0162C7.64483 41.2482 6.54085 40.1602 5.61285 38.7522C4.68485 37.3442 4.02884 35.6802 3.64484 33.7602C3.32484 33.9202 3.06883 34.0002 2.87683 34.0002C2.81283 34.0002 2.71684 34.0002 2.58884 34.0002C2.30084 34.0322 2.02886 34.0162 1.77286 33.9522C1.51686 33.8882 1.29283 33.6802 1.10083 33.3282C0.94083 32.9442 0.86084 32.2882 0.86084 31.3602C0.86084 30.4322 1.11685 29.4722 1.62885 28.4802C2.17285 27.4882 2.90885 26.5282 3.83685 25.6002C4.44485 23.3602 5.43684 21.2002 6.81284 19.1202C8.18884 17.0082 9.78885 15.0402 11.6129 13.2162C13.4369 11.3602 15.3409 9.68022 17.3249 8.17622C19.3409 6.67222 21.2928 5.39222 23.1808 4.33622C25.0688 3.24822 26.7489 2.41622 28.2209 1.84022C29.6929 1.23222 30.8128 0.928223 31.5808 0.928223C33.3408 0.928223 34.2209 1.77622 34.2209 3.47222C34.2209 3.79222 33.7248 4.25622 32.7328 4.86422C31.7409 5.44022 30.4288 6.19222 28.7968 7.12022C27.1968 8.04822 25.4529 9.15222 23.5648 10.4322C21.7088 11.7122 19.8848 13.1842 18.0928 14.8482C16.3008 16.5122 14.7329 18.3682 13.3889 20.4162C14.4769 20.1282 15.5968 19.9042 16.7488 19.7442C17.9328 19.5842 19.1489 19.5042 20.3969 19.5042C22.5729 19.5042 24.3008 20.1762 25.5808 21.5202C26.8608 22.8322 27.5009 24.7682 27.5009 27.3282C27.5009 29.3442 27.0688 31.2962 26.2048 33.1842C25.3408 35.0722 24.1888 36.7842 22.7488 38.3202C21.3408 39.8242 19.7888 41.0082 18.0928 41.8722C16.3968 42.7682 14.7328 43.2162 13.1008 43.2162ZM10.2209 28.7682C10.0929 29.6642 10.0288 30.5602 10.0288 31.4562C10.0288 32.7362 10.3329 33.8402 10.9409 34.7682C11.5489 35.6962 12.3328 36.1602 13.2928 36.1602C14.3488 36.1602 15.3728 35.8882 16.3648 35.3442C17.3888 34.8002 18.3168 34.0802 19.1488 33.1842C19.9808 32.2562 20.6369 31.2322 21.1169 30.1122C21.5969 28.9922 21.8369 27.8562 21.8369 26.7042C21.8369 26.2882 21.7728 25.9362 21.6448 25.6482C21.5168 25.3602 21.2449 25.2162 20.8289 25.2162C18.7169 25.2162 16.7648 25.5682 14.9728 26.2722C13.2128 26.9762 11.6289 27.8082 10.2209 28.7682Z"},
  ["7"] = {"0 0 29 43","M3.34741 42.456C2.70741 42.456 2.13145 42.232 1.61945 41.784C1.13945 41.368 0.899414 40.728 0.899414 39.864C0.899414 39.16 1.20346 38.136 1.81146 36.792C2.41946 35.416 3.25143 33.816 4.30743 31.992C5.39543 30.136 6.61144 28.12 7.95544 25.944C4.30743 23 3.34741 20.808 12.3234 19.08C13.6034 17.096 14.9155 15.096 16.2595 13.08C17.6355 11.032 18.9635 9.03199 20.2435 7.07999C17.9715 7.46399 15.7634 7.84799 13.6194 8.23199C11.5074 8.61599 9.68346 8.95199 8.14746 9.24C6.61146 9.49599 5.55543 9.62399 4.97943 9.62399C3.50743 9.62399 2.54743 9.31999 2.09943 8.71199C1.65143 8.10399 1.42743 7.41599 1.42743 6.64799C1.42743 6.26399 1.87542 5.86399 2.77142 5.44799C3.66742 4.99999 4.85143 4.55199 6.32343 4.10399C7.79543 3.65599 9.39541 3.23999 11.1234 2.85599C12.8514 2.47199 14.5474 2.11999 16.2114 1.79999C17.9074 1.47999 19.4115 1.23999 20.7234 1.07999C22.0674 0.887993 23.0595 0.791992 23.6995 0.791992C24.4995 0.791992 25.2674 0.999992 26.0034 1.41599C26.7394 1.79999 27.3475 2.31199 27.8275 2.95199C28.3075 3.55999 28.5474 4.21599 28.5474 4.91999C28.5474 5.14399 28.2914 5.71999 27.7794 6.64799C27.2994 7.54399 26.6274 8.712 25.7634 10.152C24.8994 11.592 23.9074 13.224 22.7874 15.048C21.6674 16.872 20.4994 18.792 19.2834 20.808C23.5 28 21 27 14.4354 28.632C12.8034 31.224 11.2514 33.608 9.77942 35.784C8.30742 37.928 7.02745 39.64 5.93945 40.92C5.58745 41.336 5.18744 41.688 4.73944 41.976C4.32344 42.296 3.85941 42.456 3.34741 42.456Z"},
  ["8"] = {"0 0 38 40","M10.6834 39.9199C8.21941 39.9199 6.26745 39.5999 4.82745 38.9599C3.38745 38.3519 2.34746 37.4879 1.70746 36.3679C1.09946 35.2479 0.79541 33.9519 0.79541 32.4799C0.79541 31.2959 1.24347 30.0319 2.13947 28.6879C3.06747 27.3119 4.31542 25.8719 5.88342 24.3679C7.45142 22.8319 9.19542 21.2639 11.1154 19.6639C8.77942 18.7359 7.17943 17.7919 6.31543 16.8319C5.48343 15.8399 5.06744 14.7039 5.06744 13.4239C5.06744 12.6239 5.46746 11.6639 6.26746 10.5439C7.09946 9.39193 8.17146 8.22393 9.48346 7.03993C10.8275 5.82393 12.2514 4.70393 13.7554 3.67993C15.2914 2.62393 16.7794 1.77593 18.2194 1.13593C19.6914 0.46393 20.9394 0.12793 21.9634 0.12793C23.0194 0.12793 23.8995 0.367929 24.6035 0.847929C25.3075 1.29593 25.6594 2.03193 25.6594 3.05593C25.6594 3.47193 25.5474 3.95193 25.3234 4.49593C25.0994 5.03993 24.6834 5.50393 24.0754 5.88793C23.4994 6.27193 22.6194 6.46393 21.4354 6.46393C21.0834 6.46393 20.6834 6.41593 20.2354 6.31993C18.8594 7.02393 17.5474 7.79193 16.2994 8.62393C15.0514 9.45593 13.9794 10.3199 13.0834 11.2159C12.1874 12.1119 11.5795 12.9919 11.2595 13.8559C11.9635 14.1439 12.6995 14.4319 13.4675 14.7199C14.2675 15.0079 15.1154 15.2959 16.0114 15.5839C16.6514 15.0719 17.2915 14.5599 17.9315 14.0479C18.6035 13.5039 19.2594 12.9599 19.8994 12.4159C22.3954 10.3359 24.6834 8.49593 26.7634 6.89593C28.8754 5.29593 30.6675 4.03193 32.1395 3.10393C33.6435 2.17593 34.7155 1.71193 35.3555 1.71193C35.8995 1.71193 36.3475 1.91993 36.6995 2.33593C37.0515 2.75193 37.2274 3.23193 37.2274 3.77593C37.2274 4.19193 37.0354 4.67193 36.6514 5.21593C36.2994 5.75993 35.6274 6.51193 34.6354 7.47193C33.6434 8.39993 32.2195 9.63193 30.3635 11.1679C28.5395 12.6719 26.1715 14.6079 23.2595 16.9759C22.9075 17.2639 22.5395 17.5519 22.1555 17.8399C24.2355 18.7999 25.8354 19.9199 26.9554 21.1999C28.0754 22.4479 28.6354 24.0479 28.6354 25.9999C28.6354 28.3999 27.9474 30.6719 26.5714 32.8159C25.2274 34.9279 23.2274 36.6399 20.5714 37.9519C17.9154 39.2639 14.6194 39.9199 10.6834 39.9199ZM17.3555 21.6319C15.5955 23.0079 13.9634 24.3039 12.4594 25.5199C10.9874 26.7359 9.80341 27.8559 8.90741 28.8799C8.01141 29.8719 7.56342 30.7199 7.56342 31.4239C7.56342 32.3199 7.91545 33.0079 8.61945 33.4879C9.32345 33.9359 10.5074 34.1599 12.1714 34.1599C13.3234 34.1599 14.4914 33.9359 15.6754 33.4879C16.8594 33.0399 17.9314 32.4159 18.8914 31.6159C19.8834 30.8159 20.6834 29.9199 21.2914 28.9279C21.8994 27.9039 22.2034 26.8159 22.2034 25.6639C22.2034 24.7039 21.7395 23.9039 20.8115 23.2639C19.9155 22.6239 18.7635 22.0799 17.3555 21.6319Z"},
  ["9"] = {"0 0 36 40","M11.8993 39.496C10.6193 39.496 9.30732 39.336 7.96332 39.016C6.65132 38.728 5.45128 38.328 4.36328 37.816C3.27528 37.336 2.39533 36.824 1.72333 36.28C1.05133 35.704 0.715332 35.16 0.715332 34.648C0.715332 34.072 0.907321 33.56 1.29132 33.112C1.67532 32.664 2.39529 32.44 3.45129 32.44C3.83529 32.44 4.39529 32.504 5.13129 32.632C5.89929 32.728 6.69931 32.84 7.53131 32.968C8.39531 33.096 9.11528 33.16 9.69128 33.16C12.8913 33.16 15.7073 32.664 18.1393 31.672C20.6033 30.648 22.6513 29.304 24.2833 27.64C25.9473 25.944 27.2113 24.12 28.0753 22.168C26.7633 23.192 25.2913 24.056 23.6593 24.76C22.0593 25.464 20.4753 25.816 18.9073 25.816C16.5393 25.816 14.6673 25.144 13.2913 23.8C11.9473 22.424 11.2753 20.472 11.2753 17.944C11.2753 16.312 11.5473 14.68 12.0913 13.048C12.6353 11.384 13.3713 9.80002 14.2993 8.29602C15.2593 6.79202 16.3313 5.46402 17.5153 4.31202C18.7313 3.12802 19.9953 2.20002 21.3073 1.52802C22.6513 0.85602 23.9633 0.52002 25.2433 0.52002C27.0033 0.52002 28.6673 1.14402 30.2353 2.39202C31.8033 3.60802 33.0673 5.49602 34.0273 8.05602C35.0193 10.584 35.5153 13.816 35.5153 17.752C35.5153 19.608 35.1633 21.56 34.4593 23.608C33.7553 25.624 32.7313 27.576 31.3873 29.464C30.0433 31.352 28.4113 33.048 26.4913 34.552C24.5713 36.056 22.3793 37.256 19.9153 38.152C17.4833 39.048 14.8113 39.496 11.8993 39.496ZM29.4673 15.448C29.4353 12.92 29.0993 10.872 28.4593 9.30402C27.8513 7.73602 26.7473 6.95202 25.1473 6.95202C24.3153 6.95202 23.4353 7.33602 22.5073 8.10402C21.6113 8.87202 20.7633 9.88002 19.9633 11.128C19.1953 12.344 18.5553 13.64 18.0433 15.016C17.5633 16.392 17.3233 17.688 17.3233 18.904C17.3233 19.416 17.5153 19.672 17.8993 19.672C19.4353 19.672 20.9233 19.416 22.3633 18.904C23.8353 18.36 25.1793 17.752 26.3953 17.08C27.6433 16.408 28.6673 15.864 29.4673 15.448Z"},
}

Usage = Usage or {
  balance = 1000,
  requests = 0,
  forwards = 0,
  latest_verify = os.time()
}

Options = Options or {
  digits = 3,
  type = "numberic",
  expire_duration = 120000
}

Targets = Targets or {}

Requests = Requests or {}


utils.getRandomNumber = function(len,seed)
  local numbers = {}
  for i = 1, len or 3 do
    local r = crypto.cipher.issac.getRandom()
    local n = crypto.cipher.issac.random(0, 9, tostring(i)..seed..tostring(r))
    numbers[i] = tostring(n)
  end
  return table.concat(numbers), numbers
end

utils.checkExpiredRequests = function(requests,timestamp)
  for k,v in pairs(requests) do
    if timestamp - v.timestamp >= Options.expire_duration then
      Requests[k] = nil
    end
  end
end



Handlers.add("Request",{
  From = function(v, m)
    return v == m.Owner
  end,
  Action = "Request-Captcha",
  Target = "_"
}, function(msg)
  assert(Usage.balance > 0, "Insufficient balance")

  if msg.Timestamp - Options.expire_duration > (Usage.latest_verify or 0) then
    utils.checkExpiredRequests(Requests,msg.Timestamp)
  end

  local num_str, numbers = utils.getRandomNumber(Options.digits, msg.Id..msg.Timestamp)
  -- print("Generated number string:".. num_str)

  local paths = {}
  local random = math.random
  for i, v in ipairs(numbers) do
    -- local _sx = random(80,120) / 100
    -- local _sy = random(80,120) / 100
    local _angle = random(-200,200) / 10
    local _density = random(0,5)
    local raw_path = Paths[v]

    local d,p = vector:convert(raw_path[1],raw_path[2],{
      transformations = {
        {type = 'rotate', angle = _angle}
      },
      obfuscate = {density = _density}
    })
    paths[i] = {p,d}
  end

  local tags = {}
  for tagName, tagValue in pairs(msg) do
    -- Tags beginning with "X-" are forwarded
    if string.sub(tagName, 1, 2) == "X-" then
      tags[tagName] = tagValue
    end
  end

  Requests[msg.Id] = {
    id = msg.Id,
    code = num_str,
    tags = tags,
    timestamp = msg.Timestamp or os.time(),
    recipient = msg.Recipient,
    from = msg.From,
    expire_duration = Options.expire_duration,
    type = Options.type,
    digits = Options.digits,
    request_type = msg['Request-Type']
  }

  if not Usage then Usage = {} end
  Usage.requests = (Usage.requests or 0) + 1
  Usage.latest_request = msg.Timestamp

  msg.reply({
    Action="Requested",
    Recipient = msg.Recipient,
    ["Captcha-Type"] = Options.type,
    ["Captcha-Digits"] = tostring(Options.digits),
    ['Request-Id'] = msg.Id,
    ['Request-Time'] = tostring(msg.Timestamp),
    ['Request-Duration']= tostring(Options.expire_duration),
    ['Request-Type'] = msg['Request-Type'],
    Data=paths
  })


end)


Handlers.add("Verify",{
  Action = "Verify-Captcha",
  From = function(v, m)
    return v == m.Owner
  end,
  ['Request-Id'] = "_",
  Data = "_"
},function(msg)
  local rid = msg['Request-Id']
  assert(Requests[rid]~=nil,"The request dosen't exist.")
  local request = {}
  for k,v in pairs(Requests[rid]) do
    request[k] = v
  end
  print(request)
  
  if msg.Timestamp - request.timestamp <= Options.expire_duration and msg.Data == request.code and msg.From == request.from then
    if not Usage then Usage = {} end
    Usage.forwards = (Usage.forwards or 0) + 1
    Usage.balance = math.max((Usage.balance or 0) - 1, 0)
    Usage.latest_verify = msg.Timestamp

    local message = {
      Target = request.recipient,
      Action = "Verified",
      Sender = request.from,
      ['Verify-Id'] = msg.Id,
      ['Request-Id'] = rid,
      ['Request-Time'] = tostring(request.timestamp),
      ['Request-Type'] = request.request_type,
      ['Verified-Time'] = tostring(msg.Timestamp),
      ['Pushed-For'] = rid,
      Data = msg.Data
    }
    print(message)
    for tagName, tagValue in pairs(request.tags) do
      message[tagName] = tagValue
    end
    Send(message)
    -- Send({Target=request.recipient,Action="Test"})
    Requests[rid] = nil
  end
  
end)